@model ModelData.Med_quantity_type


@Styles.Render("~/Content/css")
  
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/bootstrap")
@Scripts.Render("~/bundles/CustomJS")






<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <h4 class="modal-title">Medicine Quantity Type - Edit</h4>
        </div>
        <div class="modal-body">
@*@using (Ajax.BeginForm("Edit", "MedQuantityType",
            new AjaxOptions
            {
                HttpMethod = "GET",
                InsertionMode = InsertionMode.Replace,
                UpdateTargetId = "mymodel"
            }))*@

            @using (Html.BeginForm("Edit", "MedQuantityType", FormMethod.Get, new { id= "idset"}))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    @Html.ValidationSummary(true)
                    @Html.HiddenFor(model => model.Med_quan_typeId)

                    <div class="form-group">
                        <div class="col-md-3 col-md-offset-1">
                            @Html.LabelFor(model => model.Med_quan_type, new { @class = "control-label " })
                        </div>
                        <div class="col-md-6">
                            @Html.TextBoxFor(model => model.Med_quan_type, new { @class = "form-control", @id = "txtquantype" })
                            @Html.ValidationMessageFor(model => model.Med_quan_type)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3 col-md-offset-1">
                            @Html.LabelFor(model => model.Med_quantity, new { @class = "control-label" })
                        </div>
                        <div class="col-md-6">
                            @Html.TextBoxFor(model => model.Med_quantity, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Med_quantity)
                        </div>
                    </div>
                </div>
                
                <div class="modal-footer">
                            <input type="submit" value="Save" class="btn btn-success" id="btnsubmit" />                       
                            <button type="button" class="btn btn-danger" data-dismiss="modal">Cancel</button>
                    </div>
                
                <div ID ="popupform"class="popover">
                    <div class="alert-danger"> Please Fix The errors </div>
                    
                </div>
            }
        </div>
    </div>
</div>
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script type="text/javascript">
                
    $(document).ready(function () {


        $(function () {
            
            // when the modal is closed
            $('#mymodel').on('hidden.bs.modal', function () {
                // remove the bs.modal data attribute from it
                $(this).removeData('bs.modal');
                // and empty the modal-content element
                $('#mymodel .modal-content').empty();
            });
        });

        $.ajaxPrefilter(function (options, original_Options, jqXHR) {
            options.async = true;
        });

    });

 
       



    //$('#mymodel').on('show.bs.modal', function (event) {
    //    var button = $(event.relatedTarget); // Button that triggered the modal
    //    var url = button.attr("href");
    //    var modal = $(this);

    //    // note that this will replace the content of modal-content ever time the modal is opened
    //    modal.find('.modal-content').load(url);
    //});

    


    //$(function(){
    //    $("#idset").submit(function (e) {
           
    //        //var txtId = $("#txtquantype").val();
    //        //if (txtId == "") {
    //        //    debugger;
    //        //    $form.prepend($feedback);
    //        //    e.preventDefault();
    //        //}
    //        debugger;
    //        e.preventDefault();

    //        $.ajax({


    //            url: this.action,
    //            type: this.method,
    //            data: $(this).serialize,
    //            success: function (data) {
    //                $("#mymodel").html(data);
    //            }
    //            });

    //        $form = $(this);
    //        $.post(window.location.href, $(this).serialize, function (data) {
    //            $feedback = $("<div>").html(data).find(".popupform");
    //            $form.prepend($feedback);
    //        })
            
            //$form = $(this);
            //$.post(document.location.href,$(this).serialize, function(data){

            //    $feedback = $("<div>").html(data).find(".popupform");
            //    $form.prepend($feedback);
            //})
    //    })
    //})
</script>




@*<script type="text/javascript">
    $('#form1').change(
       function () {
           debugger;
           $.validator.unobtrusive.parse("#form1");
       });
</script>*@
